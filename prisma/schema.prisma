// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  isActive  Boolean  @default(true)
  role      UserRoleEnum @default(USER)
  stripeCustomerId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reservations Reservation[]
  payments     Payment[]
  notifications Notification[]
  reviews      Review[]
  receipts     Receipt[]     @relation("UserReceipts")
  adminActions AdminAuditLog[] @relation("AdminActions")
  systemLogs   SystemLog[]     @relation("SystemLogs")
  favorites    Favorite[]      @relation("UserFavorites")
  // Venues owned by this admin (empty for regular users)
  ownedVenues  Venue[]                 @relation("VenueOwner")
  // Business account for ADMIN users
  businessAccount BusinessAccount?

  @@map("users")
}

// Business Account Management (for ADMIN users)
model BusinessAccount {
  id                String   @id @default(cuid())
  businessName      String
  businessType      BusinessType
  taxId             String?   // RFC for Mexico, Tax ID for other countries
  legalName         String?   // Legal business name if different from business name
  contactEmail      String?
  contactPhone      String?
  website           String?
  description       String?   @db.Text

  // Address information
  address           String?
  city              String?
  state             String?
  country           String    @default("México")
  zipCode           String?

  // Business verification
  isVerified        Boolean   @default(false)
  verificationDate  DateTime?
  documents         Json?     // Array of verification documents

  // Business settings
  settings          Json?     // Business-specific settings
  metadata          Json?     // Additional flexible data

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  owner             User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String       @unique
  bankAccounts      BankAccount[]
  paymentHistories  PaymentHistory[]

  @@map("business_accounts")
}

enum BusinessType {
  HOTEL
  RESTAURANT
  SPA
  TOUR_AGENCY
  EVENT_CENTER
  ENTERTAINMENT
  OTHER
}

// Bank Account Management
model BankAccount {
  id              String   @id @default(cuid())
  bankName        String
  accountNumber   String   // Encrypted/masked account number
  accountType     AccountType
  accountHolder   String   // Name on the account
  routingNumber   String?  // For international transfers
  swiftCode       String?  // For international transfers

  // Verification
  isVerified      Boolean  @default(false)
  verificationDate DateTime?

  // Status
  isActive        Boolean  @default(true)
  isPrimary       Boolean  @default(false) // Primary account for deposits

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  businessAccount   BusinessAccount @relation(fields: [businessAccountId], references: [id], onDelete: Cascade)
  businessAccountId String
  paymentHistories  PaymentHistory[]

  @@map("bank_accounts")
}

enum AccountType {
  CHECKING
  SAVINGS
  BUSINESS_CHECKING
  BUSINESS_SAVINGS
}

// Payment History for businesses (deposits received)
model PaymentHistory {
  id              String         @id @default(cuid())
  amount          Decimal        @db.Decimal(10, 2)
  currency        String         @default("MXN")
  status          DepositStatus  @default(PENDING)
  transactionRef  String?        // Reference from payment processor
  description     String?

  // Deposit details
  depositDate     DateTime?
  processedDate   DateTime?

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  businessAccount   BusinessAccount @relation(fields: [businessAccountId], references: [id])
  businessAccountId String
  bankAccount       BankAccount     @relation(fields: [bankAccountId], references: [id])
  bankAccountId     String
  reservation       Reservation     @relation(fields: [reservationId], references: [id])
  reservationId     String

  @@map("payment_histories")
}

enum DepositStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum UserRoleEnum {
  USER
  EMPLOYEE
  MANAGER
  ADMIN
  SUPER_ADMIN
}

// Venue Management
model Venue {
  id          String     @id @default(cuid())
  name        String
  description String?    @db.Text
  category    VenueType
  address     String
  city        String
  state       String     @default("Estado")
  country     String     @default("México")
  zipCode     String?
  phone       String?
  email       String?
  website     String?
  latitude    Decimal?   @db.Decimal(10, 8)
  longitude   Decimal?   @db.Decimal(11, 8)
  rating      Decimal?   @db.Decimal(2, 1)
  checkInTime String?    @default("15:00") // For accommodation venues
  checkOutTime String?   @default("11:00") // For accommodation venues
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  services     Service[]
  reservations Reservation[]
  reviews      Review[]
  favorites    Favorite[]    @relation("VenueFavorites")
  // Owner relationship (admin who manages this venue)
  ownerId      String?
  owner        User?         @relation("VenueOwner", fields: [ownerId], references: [id])

  @@map("venues")
}

enum VenueType {
  ACCOMMODATION
  RESTAURANT
  SPA
  TOUR_OPERATOR
  EVENT_CENTER
  ENTERTAINMENT
}

// Service Management
model Service {
  id               String      @id @default(cuid())
  name             String
  description      String?     @db.Text
  category         ServiceType
  subcategory      String?
  price            Decimal     @db.Decimal(10, 2)
  currency         String      @default("MXN")
  duration         Int?        // Duration in minutes
  capacity         Int         @default(1)
  isActive         Boolean     @default(true)
  requiresApproval Boolean     @default(false)
  cancellationPolicy String?   @db.Text
  images           Json?       // Array of image URLs
  amenities        Json?       // Array of amenities/features
  availability     Json?       // Availability schedule
  metadata         Json?       // Additional flexible data
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  venue        Venue         @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId      String
  reservations Reservation[]
  reviews      Review[]

  @@map("services")
}

enum ServiceType {
  ACCOMMODATION
  DINING
  SPA_WELLNESS
  TOUR_EXPERIENCE
  EVENT_MEETING
  TRANSPORTATION
  ENTERTAINMENT
}

// Reservation Management
model Reservation {
  id             String            @id @default(cuid())
  confirmationId String            @unique @default(cuid())
  status         ReservationStatus @default(PENDING)
  checkInDate    DateTime
  checkOutDate   DateTime
  guests         Int               @default(1)
  totalAmount    Decimal           @db.Decimal(10, 2)
  currency       String            @default("MXN")
  notes          String?           @db.Text
  specialRequests String?          @db.Text
  metadata       Json?             // Flexible additional data
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  venue     Venue     @relation(fields: [venueId], references: [id])
  venueId   String
  service   Service   @relation(fields: [serviceId], references: [id])
  serviceId String
  payments  Payment[]
  reviews   Review[]
  paymentHistories PaymentHistory[]

  @@map("reservations")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  CHECKED_IN
  CHECKED_OUT
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Payment Management
model Payment {
  id                String        @id @default(cuid())
  stripePaymentId   String?       @unique
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("MXN")
  status            PaymentStatus @default(PENDING)
  paymentMethod     String?
  transactionDate   DateTime?
  description       String?
  metadata          Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId String
  receipt       Receipt?

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

// Notification Management
model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  title       String
  message     String           @db.Text
  isRead      Boolean          @default(false)
  metadata    Json?            // Flexible data storage
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@map("notifications")
}

enum NotificationType {
  RESERVATION_CONFIRMATION
  RESERVATION_CANCELLATION
  PAYMENT_CONFIRMATION
  CHECK_IN_REMINDER
  SYSTEM_ALERT
  PROMOTION
}

// System Configuration
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

// Review & Ratings Management
model Review {
  id          String      @id @default(cuid())
  rating      Int         // Rating from 1-5 stars
  title       String?     // Optional review title
  comment     String?     @db.Text // Review text content
  isVerified  Boolean     @default(false) // If review is from verified reservation
  isVisible   Boolean     @default(true) // Admin can hide inappropriate reviews
  helpfulVotes Int        @default(0) // Future: helpful votes count
  reportCount Int         @default(0) // Future: report count for moderation
  metadata    Json?       // Additional flexible data (photos, etc.)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations - A review can be for either a Venue OR a Service
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  venue       Venue?      @relation(fields: [venueId], references: [id], onDelete: Cascade)
  venueId     String?
  service     Service?    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId   String?

  // Optional reservation link (for verified reviews)
  reservation Reservation? @relation(fields: [reservationId], references: [id], onDelete: SetNull)
  reservationId String?

  // Note: Business logic ensures review is for either venue OR service, not both
  @@index([venueId, isVisible])
  @@index([serviceId, isVisible])
  @@index([userId])
  @@index([rating])
  @@map("reviews")
}

// Admin Audit Log for tracking administrative actions
model AdminAuditLog {
  id              String              @id @default(cuid())
  adminUserId     String
  adminUserName   String
  adminUserEmail  String
  action          AdminActionType
  resourceType    AdminResourceType
  resourceId      String
  oldValues       Json?               // Previous values before change
  newValues       Json?               // New values after change
  metadata        Json?               // Additional context data
  ipAddress       String?
  userAgent       String?             @db.Text
  createdAt       DateTime            @default(now())

  // Relations
  adminUser       User                @relation("AdminActions", fields: [adminUserId], references: [id])

  @@index([adminUserId])
  @@index([action])
  @@index([resourceType, resourceId])
  @@index([createdAt])
  @@map("admin_audit_logs")
}

enum AdminActionType {
  PAYMENT_REFUND
  PAYMENT_STATUS_UPDATE
  PAYMENT_MANUAL_VERIFICATION
  RESERVATION_STATUS_UPDATE
  RESERVATION_CANCEL
  RECEIPT_VERIFY
  RECEIPT_REGENERATE
  BULK_PAYMENT_UPDATE
  BULK_PAYMENT_REFUND
}

enum AdminResourceType {
  PAYMENT
  RESERVATION
  RECEIPT
  INVOICE
  USER
}

// Receipt Management for payments
model Receipt {
  id              String        @id @default(cuid())
  receiptNumber   String        @unique @default(cuid())
  type            ReceiptType   @default(PAYMENT)
  status          ReceiptStatus @default(PENDING)
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("MXN")
  issueDate       DateTime      @default(now())
  dueDate         DateTime?     // For invoices
  paidDate        DateTime?     // When payment was completed
  taxAmount       Decimal?      @db.Decimal(10, 2)
  subtotalAmount  Decimal       @db.Decimal(10, 2)
  metadata        Json?         // Flexible data storage
  pdfUrl          String?       // Generated PDF receipt URL
  isVerified      Boolean       @default(false)
  verifiedBy      String?       // Admin user ID who verified
  verifiedAt      DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  payment         Payment       @relation(fields: [paymentId], references: [id])
  paymentId       String        @unique
  user            User          @relation("UserReceipts", fields: [userId], references: [id])
  userId          String

  @@map("receipts")
}

enum ReceiptType {
  PAYMENT          // Payment receipt
  INVOICE          // Invoice (for future payments)  
  REFUND           // Refund receipt
  CREDIT_NOTE      // Credit note
}

enum ReceiptStatus {
  PENDING          // Receipt generated, pending verification
  VERIFIED         // Receipt verified by admin
  REJECTED         // Receipt rejected (needs regeneration)
  REGENERATED      // Receipt was regenerated
}

// Contact Form Management
model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String
  message   String   @db.Text
  status    ContactFormStatus @default(PENDING)
  notes     String?  @db.Text // Admin notes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_forms")
}

enum ContactFormStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  ARCHIVED
}

// System Logs Management for comprehensive monitoring
model SystemLog {
  id              String            @id @default(cuid())
  level           SystemLogLevel
  category        SystemLogCategory
  eventType       String            // Specific event identifier
  message         String            @db.Text

  // User context (optional)
  userId          String?
  userName        String?
  userEmail       String?
  userRole        UserRoleEnum?

  // Request context
  ipAddress       String?
  userAgent       String?           @db.Text
  requestId       String?           // For request tracking
  sessionId       String?           // Session tracking

  // Resource context
  resourceType    String?           // e.g., 'user', 'payment', 'reservation'
  resourceId      String?           // ID of affected resource

  // Performance tracking
  duration        Int?              // Duration in milliseconds
  statusCode      Int?              // HTTP status code for API events

  // Data context (sanitized)
  oldValues       Json?             // Previous state
  newValues       Json?             // New state
  metadata        Json?             // Additional context data

  // Error context
  errorCode       String?           // Error code if applicable
  errorMessage    String?           @db.Text
  stackTrace      String?           @db.LongText

  createdAt       DateTime          @default(now())

  // Relations (optional user reference)
  user            User?             @relation("SystemLogs", fields: [userId], references: [id], onDelete: SetNull)

  // Indexes for performance
  @@index([level])
  @@index([category])
  @@index([eventType])
  @@index([userId])
  @@index([createdAt])
  @@index([resourceType, resourceId])
  @@index([level, createdAt])
  @@index([category, createdAt])
  @@index([userId, createdAt])
  @@map("system_logs")
}

enum SystemLogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  CRITICAL
}

enum SystemLogCategory {
  AUTHENTICATION      // Login, logout, registration, password reset
  AUTHORIZATION      // Permission checks, role changes
  USER_MANAGEMENT    // User creation, updates, deletion
  PAYMENT_PROCESSING // Payment events, refunds, failures
  RESERVATION_SYSTEM // Reservation operations
  EMAIL_SERVICE      // Email sending, failures
  API_REQUEST        // API calls, responses, errors
  DATABASE_OPERATION // Critical DB operations
  SECURITY_EVENT     // Security-related events
  SYSTEM_ERROR       // General system errors
  PERFORMANCE        // Performance monitoring
  ADMIN_ACTION       // Administrative actions
  AUDIT_TRAIL        // Compliance and audit events
}

// User Favorites Management
model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation("UserFavorites", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  venue     Venue    @relation("VenueFavorites", fields: [venueId], references: [id], onDelete: Cascade)
  venueId   String

  // Prevent duplicate favorites
  @@unique([userId, venueId])
  @@map("favorites")
}

// Simplified for MVP - Complex role system removed
// Using UserRoleEnum (SUPER_ADMIN, ADMIN, USER) with direct venue ownership