/**
 * Stub version of useService hook for MVP build.
 * Temporarily disabled full service functionality.
 */

export const useService = () => {
  return {
    activeServices: [],
    checkAvailability: async () => ({ payload: false, type: 'stub' }),
    clearError: () => {},
    clearFilters: () => {},
    createNewService: async () => ({ payload: null, type: 'stub' }),
    currentPageInfo: { current: 1, limit: 10, page: 1, total: 0 },
    error: null,
    errorMessage: null,
    filterByActiveStatus: () => {},
    filterByCategory: () => {},
    filterByPriceRange: () => {},
    filterByVenue: () => {},
    filteredServicesCount: 0,
    filters: {},
    getServicesByCategory: () => () => [],
    getServicesByVenue: () => () => [],
    goToNextPage: () => {},
    goToPage: () => {},
    goToPreviousPage: () => {},
    hasActiveFilters: false,
    hasNextPage: false,
    hasPreviousPage: false,
    hasServices: false,
    isLoading: false,
    isManagementReady: true,
    lastUpdated: null,
    loadServiceById: async () => ({ payload: null, type: 'stub' }),
    loadServices: async () => ({ payload: [], type: 'stub' }),
    pagination: { limit: 10, page: 1 },
    popularServices: [],
    refresh: () => {},
    removeService: async () => ({ payload: null, type: 'stub' }),
    resetState: () => {},
    searchServices: () => {},
    searchSuggestions: [],
    selectService: () => {},
    selectedService: null,
    selectedServiceWithVenue: null,
    serviceStats: { active: 0, popular: 0, total: 0 },
    services: [],
    servicesWithImages: [],
    setFilters: () => {},
    setPagination: () => {},
    toggleServiceStatus: async () => {},
    totalServices: 0,
    updateServiceData: async () => ({ payload: null, type: 'stub' }),
  };
};
